{"version":3,"file":"logdna.middleware.js","sourceRoot":"/","sources":["logdna.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport { defaultReqTransform, defaultResTransform, LogDNAhttpLoggerOptions } from \"./logdna.options\";\nimport { LogDNAService } from \"./logdna.service\";\nimport { getClientIp } from \"@supercharge/request-ip\";\n\nexport function LogDNAhttpLogger(options: LogDNAhttpLoggerOptions) {\n  return function (req: Request, res: Response, next: NextFunction) {\n    const begin = Date.now();\n    const { method, url } = req;\n    var end = res.end;\n    // @ts-expect-error\n    res.end = function (chunk, encoding: any) {\n      const duration = Date.now() - begin;\n      res.end = end;\n      res.end(chunk, encoding);\n      if (!(options?.filter?.(req, res) ?? true)) {\n        return;\n      }\n      const { statusCode } = res;\n      let msg = options?.messageFormat?.(req, res) ?? `[${method}] ${url} ${statusCode} ${duration}ms`;\n      const errorRef = res.getHeader(\"X-Error-Ref\");\n      if (errorRef) {\n        msg += ` Error: ${errorRef}`;\n      }\n      let body;\n      if (chunk) {\n        const contentType = res.getHeader(\"content-type\")?.toString();\n        if (contentType?.includes(\"text\")) {\n          body = chunk.toString();\n        } else if (contentType?.includes(\"json\")) {\n          body = safeJSONParse(chunk.toString());\n        }\n      }\n      const defaultReqDTO = reqDTO(req);\n      const defaultResDTO = resDTO(res, body);\n      const reqMeta = options?.reqMetaTransform?.(req, defaultReqDTO) ?? defaultReqDTO;\n      const resMeta = options?.resMetaTransform?.(res, defaultResDTO) ?? defaultResDTO;\n      LogDNAService.LogDNAServiceInstance().http(msg, reqMeta, resMeta);\n    };\n    next();\n  };\n}\n\nfunction reqDTO(req: Request): defaultReqTransform {\n  return {\n    protocol: req.protocol,\n    ip: getClientIp(req),\n    path: req.url,\n    params: req.params,\n    method: req.method,\n    headers: req.headers,\n    body: req.body,\n  };\n}\n\nfunction resDTO(res: Response, body: any): defaultResTransform {\n  return {\n    statusCode: res.statusCode,\n    statusMessage: res.statusMessage,\n    headers: res.getHeaders(),\n    locals: res.locals,\n    body,\n  };\n}\n\nfunction safeJSONParse(input: string) {\n  try {\n    return JSON.parse(input);\n  } catch (e) {\n    return input;\n  }\n}\n"]}