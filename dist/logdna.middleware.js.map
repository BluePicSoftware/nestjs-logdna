{"version":3,"file":"logdna.middleware.js","sourceRoot":"/","sources":["logdna.middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { defaultReqTransform, defaultResTransform, LogDNAhttpLoggerOptions } from './logdna.options';\r\nimport { LogDNAService } from './logdna.service';\r\nimport { getClientIp } from '@supercharge/request-ip';\r\n\r\nexport function LogDNAhttpLogger(options: LogDNAhttpLoggerOptions) {\r\n  return function(req: Request, res: Response, next: NextFunction) {\r\n    const begin = Date.now();\r\n    const { method, url } = req;\r\n    var end = res.end;\r\n    // @ts-expect-error\r\n    res.end = function (chunk, encoding) {\r\n      const duration = Date.now() - begin;\r\n\r\n      res.end = end;\r\n      res.end(chunk, encoding);\r\n\r\n      if (!(options?.filter?.(req, res) ?? true)) {\r\n        return;\r\n      }  \r\n\r\n      const { statusCode } = res;\r\n      let msg =\r\n        options?.messageFormat?.(req, res) ??\r\n        `[${method}] ${url} ${statusCode} ${duration}ms`;\r\n      if(res.locals?.errorRef) {\r\n        msg += ` Error: ${res.locals.errorRef}`;\r\n      }\r\n      let body;\r\n      if (chunk) {\r\n        const contentType = res.getHeader('content-type')?.toString();\r\n        if(contentType?.includes('text')) {\r\n          body = chunk.toString();\r\n        }\r\n        else if(contentType?.includes('json')) {\r\n          body = safeJSONParse(chunk.toString());\r\n        }\r\n      }\r\n      const defaultReqDTO = reqDTO(req);\r\n      const defaultResDTO = resDTO(res, body);\r\n      const reqMeta = options?.reqMetaTransform?.(req, defaultReqDTO) ?? defaultReqDTO;\r\n      const resMeta = options?.resMetaTransform?.(res, defaultResDTO) ?? defaultResDTO;\r\n      LogDNAService.LogDNAServiceInstance().http(msg, reqMeta, resMeta);\r\n    }\r\n    next();\r\n  };\r\n}\r\n\r\nfunction reqDTO(req: Request): defaultReqTransform {\r\n  return {\r\n    protocol: req.protocol,\r\n    ip: getClientIp(req),\r\n    path: req.url,\r\n    params: req.params,\r\n    method: req.method,\r\n    headers: req.headers,\r\n    body: req.body,\r\n  }\r\n}\r\n\r\nfunction resDTO(res: Response, body: any): defaultResTransform {\r\n  return {\r\n    statusCode: res.statusCode,\r\n    statusMessage: res.statusMessage,\r\n    headers: res.getHeaders(),\r\n    locals: res.locals,\r\n    body,\r\n  }\r\n}\r\n\r\nfunction safeJSONParse(input: string) {\r\n  try {\r\n      return JSON.parse(input);\r\n  } catch (e) {\r\n      return input;\r\n  }\r\n}"]}