{"version":3,"file":"logdna.middleware.js","sourceRoot":"/","sources":["logdna.middleware.ts"],"names":[],"mappings":";;;AAEA,qDAAiD;AAEjD,SAAgB,gBAAgB,CAAC,OAAgC;IAC/D,OAAO,UAAS,GAAY,EAAE,GAAa,EAAE,IAAkB;QAC7D,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACzB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;QAC7B,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;;YACnB,IAAI,CAAC,CAAC,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,wDAAG,GAAG,EAAE,GAAG,CAAC,mCAAI,IAAI,CAAC,EAAE;gBAC1C,OAAO,IAAI,EAAE,CAAC;aACf;YACD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;YACpC,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC;YAC3B,IAAI,GAAG,GACL,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,wDAAG,GAAG,EAAE,GAAG,CAAC,mCAClC,eAAe,IAAI,IAAI,UAAU,IAAI,QAAQ,IAAI,CAAC;YACpD,IAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACtB,GAAG,IAAI,WAAW,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;aACzC;YACD,MAAM,OAAO,GAAG,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,wDAAG,GAAG,CAAC,mCAAI,GAAG,CAAC;YACxD,MAAM,OAAO,GAAG,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,wDAAG,GAAG,CAAC,mCAAI,GAAG,CAAC;YACxD,8BAAa,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QACH,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC;AAtBD,4CAsBC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { LogDNAhttpLoggerOptions } from './logdna.options';\r\nimport { LogDNAService } from './logdna.service';\r\n\r\nexport function LogDNAhttpLogger(options: LogDNAhttpLoggerOptions) {\r\n  return function(req: Request, res: Response, next: NextFunction) {\r\n    const begin = Date.now();\r\n    const { method, path } = req;\r\n    res.on('close', () => {\r\n      if (!(options?.filter?.(req, res) ?? true)) {\r\n        return next();\r\n      }\r\n      const duration = Date.now() - begin;\r\n      const { statusCode } = res;\r\n      let msg =\r\n        options?.messageFormat?.(req, res) ??\r\n        `$[{method}] ${path} ${statusCode} ${duration}ms`;\r\n      if(res.locals.errorRef) {\r\n        msg += ` Error: ${res.locals.errorRef}`;\r\n      }\r\n      const reqMeta = options?.reqMetaTransform?.(req) ?? req;\r\n      const resMeta = options?.resMetaTransform?.(res) ?? res;\r\n      LogDNAService.LogDNAServiceInstance().http(msg, reqMeta, resMeta);\r\n    });\r\n    next();\r\n  };\r\n}\r\n"]}