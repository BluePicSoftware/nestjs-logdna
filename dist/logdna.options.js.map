{"version":3,"file":"logdna.options.js","sourceRoot":"/","sources":["logdna.options.ts"],"names":[],"mappings":"","sourcesContent":["import { ModuleMetadata, Type } from '@nestjs/common';\nimport { ConstructorOptions } from '@logdna/logger';\nimport { Request, Response } from 'express';\n\nexport type LogLevel = 'info' | 'error' | 'warn' | 'debug' | 'verbose' | 'http';\n\nexport interface LogDNAModuleOptions {\n  testMode?: boolean;\n  ingestionKey?: string;\n  logDNAOptions?: ConstructorOptions;\n}\n\nexport interface LogDNAOptionsFactory {\n  createLogDNAModuleOptions():\n    | Promise<LogDNAModuleOptions>\n    | LogDNAModuleOptions;\n}\n\nexport interface LogDNAModuleAsyncOptions\n  extends Pick<ModuleMetadata, 'imports'> {\n  inject?: any[];\n  useClass?: Type<LogDNAOptionsFactory>;\n  useExisting?: Type<LogDNAOptionsFactory>;\n  useFactory?: (\n    ...args: any[]\n  ) => Promise<LogDNAModuleOptions> | LogDNAModuleOptions;\n}\n\nexport interface LogDNAhttpLoggerOptions {\n  /**\n   * Function to determine if req/res should be logged.\n   * @default 'All req/res are logged'\n   */\n  filter?: (req: Request, res: Response) => boolean;\n  /**\n   * Function to override default log message.\n   * @default '[METHOD] [path] [status] [duration]'\n   */\n  messageFormat?: (req: Request, res: Response) => string;\n  /**\n   * Function to transform request object before it's added to log meta\n   */\n  reqMetaTransform?: (req: Request, defaultTransform: defaultReqTransform) => any;\n  /**\n   * Function to transform response object before it's added to log meta\n   */\n  resMetaTransform?: (res: Response, defaultTransform: defaultResTransform) => any;\n}\n\nexport interface defaultReqTransform {\n  protocol: string;\n  ip?: string;\n  path: string;\n  params?: Object;\n  method: string;\n  headers?: Object;\n  body?: Object;\n}\n\nexport interface defaultResTransform {\n  statusCode: number;\n  statusMessage?: string;\n  headers?: Object;\n  locals?: Object;\n  body?: Object;\n}\n\nexport interface LogDNAhttpExceptionLoggerOptions {\n    /**\n   * generate reference code which will be appended to exception message, log message and req/res log message\n   */\n    generateReference?: boolean;\n  /**\n   * Function to determine if exception should be logged\n   * @default 'All exceptions are logged'\n   */\n  filter?: (exception: unknown, req: Request, res: Response) => boolean;\n  /**\n   * Function to transform exception object before it's added to log meta\n   */\n  exceptionMetaTransform?: (exception: unknown, req: Request, res: Response) => any;\n  /**\n   * Function to override default log message.\n   * @default '[Error name]'\n   */\n  messageFormat?: (exception: unknown, req: Request, res: Response) => string;\n}\n"]}