{"version":3,"file":"logdna.service.js","sourceRoot":"/","sources":["logdna.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAgE;AAChE,2CAAoD;AAEpD,yDAA2D;AAI3D,IAAa,aAAa,qBAA1B,MAAa,aAAa;IAIxB,YAC0C,OAA6B;QAA7B,YAAO,GAAP,OAAO,CAAsB;QAErE,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;YACpE,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,aAAa;YAAE,OAAO,CAAC,aAAa,GAAG,EAAE,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM;YAAE,OAAO,CAAC,aAAa,CAAC,MAAM,GAAG,EAAE,CAAC;QACrE,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAErD,IAAI,CAAC,cAAc,GAAG,IAAA,qBAAY,EAChC,OAAO,CAAC,YAAY,EACpB,OAAO,CAAC,aAAa,CACtB,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,qBAAqB;QACjC,IAAI,CAAC,eAAa,CAAC,eAAe,EAAE;YAClC,eAAa,CAAC,eAAe,GAAG,IAAI,eAAa,EAAE,CAAC;SACrD;QACD,OAAO,eAAa,CAAC,eAAe,CAAC;IACvC,CAAC;IAED,GAAG,CAAC,OAAY,EAAE,GAAG,cAAqB;QACxC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC/C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,cAAc,CAAC;SAC3C,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,cAAqB;QAC1C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC/C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,cAAc,CAAC;YAC1C,KAAK,EAAE,iBAAQ,CAAC,KAAK;SACtB,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,OAAY,EAAE,GAAG,cAAqB;QACzC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC/C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,cAAc,CAAC;YAC1C,KAAK,EAAE,iBAAQ,CAAC,IAAI;SACrB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,cAAqB;QAC1C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC/C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,cAAc,CAAC;YAC1C,KAAK,EAAE,iBAAQ,CAAC,KAAK;SACtB,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,OAAY,EAAE,GAAG,cAAqB;QAC5C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC/C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,cAAc,CAAC;YAC1C,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,OAAY,EAAE,GAAQ,EAAE,GAAQ;QACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC/C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,IAAI,EAAE;gBACJ,OAAO,EAAE,GAAG;gBACZ,QAAQ,EAAE,GAAG;aACd;YACD,KAAK,EAAE,MAAM;SACd,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AA9EY,aAAa;IADzB,IAAA,mBAAU,GAAE;IAMR,WAAA,IAAA,eAAM,EAAC,wCAAqB,CAAC,CAAA;;GALrB,aAAa,CA8EzB;AA9EY,sCAAa","sourcesContent":["import { createLogger, Logger, LogLevel } from '@logdna/logger';\r\nimport { Inject, Injectable } from '@nestjs/common';\r\nimport { LoggerService } from '@nestjs/common';\r\nimport { LOGDNA_MODULE_OPTIONS } from './logdna.constants';\r\nimport { LogDNAModuleOptions } from './logdna.options';\r\n\r\n@Injectable()\r\nexport class LogDNAService implements LoggerService {\r\n  private logDNAinstance!: Logger;\r\n  private static serviceInstance: LogDNAService;\r\n\r\n  constructor(\r\n    @Inject(LOGDNA_MODULE_OPTIONS) readonly options?: LogDNAModuleOptions\r\n  ) {\r\n    if (!options) {\r\n      console.log('options not found. Did you use LogDNAModule.forRoot?');\r\n      return;\r\n    }\r\n    //inject custom level 'verbose' and 'http'\r\n    if (!options.logDNAOptions) options.logDNAOptions = {};\r\n    if (!options.logDNAOptions.levels) options.logDNAOptions.levels = [];\r\n    options.logDNAOptions.levels.push('verbose', 'http');\r\n    //instantiate logger\r\n    this.logDNAinstance = createLogger(\r\n      options.ingestionKey,\r\n      options.logDNAOptions\r\n    );\r\n  }\r\n\r\n  public static LogDNAServiceInstance(): LogDNAService {\r\n    if (!LogDNAService.serviceInstance) {\r\n      LogDNAService.serviceInstance = new LogDNAService();\r\n    }\r\n    return LogDNAService.serviceInstance;\r\n  }\r\n\r\n  log(message: any, ...optionalParams: any[]) {\r\n    this.logDNAinstance.log(JSON.stringify(message), {\r\n      timestamp: Date.now(),\r\n      meta: Object.assign({}, ...optionalParams),\r\n    });\r\n  }\r\n\r\n  error(message: any, ...optionalParams: any[]) {\r\n    this.logDNAinstance.log(JSON.stringify(message), {\r\n      timestamp: Date.now(),\r\n      meta: Object.assign({}, ...optionalParams),\r\n      level: LogLevel.error,\r\n    });\r\n  }\r\n\r\n  warn(message: any, ...optionalParams: any[]) {\r\n    this.logDNAinstance.log(JSON.stringify(message), {\r\n      timestamp: Date.now(),\r\n      meta: Object.assign({}, ...optionalParams),\r\n      level: LogLevel.warn,\r\n    });\r\n  }\r\n\r\n  debug(message: any, ...optionalParams: any[]) {\r\n    this.logDNAinstance.log(JSON.stringify(message), {\r\n      timestamp: Date.now(),\r\n      meta: Object.assign({}, ...optionalParams),\r\n      level: LogLevel.debug,\r\n    });\r\n  }\r\n\r\n  verbose(message: any, ...optionalParams: any[]) {\r\n    this.logDNAinstance.log(JSON.stringify(message), {\r\n      timestamp: Date.now(),\r\n      meta: Object.assign({}, ...optionalParams),\r\n      level: 'verbose',\r\n    });\r\n  }\r\n\r\n  http(message: any, req: any, res: any) {\r\n    this.logDNAinstance.log(JSON.stringify(message), {\r\n      timestamp: Date.now(),\r\n      meta: {\r\n        request: req,\r\n        response: res,\r\n      },\r\n      level: 'http',\r\n    });\r\n  }\r\n}\r\n"]}