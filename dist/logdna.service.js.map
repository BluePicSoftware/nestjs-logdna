{"version":3,"file":"logdna.service.js","sourceRoot":"/","sources":["logdna.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { createLogger, Logger } from '@logdna/logger';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { LoggerService } from '@nestjs/common';\nimport { LOGDNA_MODULE_OPTIONS } from './logdna.constants';\nimport { LogDNAModuleOptions } from './logdna.options';\n\n@Injectable()\nexport class LogDNAService implements LoggerService {\n  private static logDNAinstance: Logger | Console;\n  private static serviceInstance: LogDNAService;\n\n  constructor(\n    @Inject(LOGDNA_MODULE_OPTIONS) readonly options?: LogDNAModuleOptions\n  ) {\n    if (!options) {\n      return;\n    }\n    if (options.testMode) {\n      LogDNAService.logDNAinstance = console;\n      return;\n    }\n    if (!options.ingestionKey) {\n      throw new Error('LogDNA ingestion key is required');\n    }\n    if (!options.logDNAOptions) options.logDNAOptions = {};\n    if (!options.logDNAOptions.levels) options.logDNAOptions.levels = [];\n    options.logDNAOptions.levels.push('info', 'error', 'warn', 'debug', 'verbose', 'http');\n    //instantiate logger\n    LogDNAService.logDNAinstance = createLogger(\n      options.ingestionKey,\n      options.logDNAOptions\n    );\n  }\n\n  public static LogDNAServiceInstance(): LogDNAService {\n    if (!LogDNAService.serviceInstance) {\n      LogDNAService.serviceInstance = new LogDNAService();\n    }\n    return LogDNAService.serviceInstance;\n  }\n\n  log(message: any, ...optionalParams: any[]) {\n    try {\n      LogDNAService.logDNAinstance.log(JSON.stringify(message), {\n        timestamp: Date.now(),\n        meta: Object.assign({}, ...optionalParams),\n      });\n    } catch {}\n  }\n\n  error(message: any, ...optionalParams: any[]) {\n    try {\n      LogDNAService.logDNAinstance.log(JSON.stringify(message), {\n        timestamp: Date.now(),\n        meta: Object.assign({}, ...optionalParams),\n        level: 'error',\n      });\n    } catch {}\n  }\n\n  warn(message: any, ...optionalParams: any[]) {\n    try {\n      LogDNAService.logDNAinstance.log(JSON.stringify(message), {\n        timestamp: Date.now(),\n        meta: Object.assign({}, ...optionalParams),\n        level: 'warn',\n      });\n    } catch {}\n  }\n\n  debug(message: any, ...optionalParams: any[]) {\n    try {\n      LogDNAService.logDNAinstance.log(JSON.stringify(message), {\n        timestamp: Date.now(),\n        meta: Object.assign({}, ...optionalParams),\n        level: 'debug',\n      });\n    } catch {}\n  }\n\n  verbose(message: any, ...optionalParams: any[]) {\n    try {\n      LogDNAService.logDNAinstance.log(JSON.stringify(message), {\n        timestamp: Date.now(),\n        meta: Object.assign({}, ...optionalParams),\n        level: 'verbose',\n      });\n    } catch {}\n  }\n\n  http(message: any, req: any, res: any) {\n    try {\n      LogDNAService.logDNAinstance.log(JSON.stringify(message), {\n        timestamp: Date.now(),\n        meta: {\n          request: req,\n          response: res,\n        },\n        level: 'http',\n      });\n    } catch {}\n  }\n}\n"]}