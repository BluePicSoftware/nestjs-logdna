{"version":3,"file":"logdna.filter.js","sourceRoot":"/","sources":["logdna.filter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAqE;AAGrE,qDAAiD;AACjD,mCAAqC;AAGrC,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IACpC,YAA6B,UAAwD,SAAS;QAAjE,YAAO,GAAP,OAAO,CAA0D;IAAG,CAAC;IAClG,KAAK,CAAC,EAAiB,EAAE,IAAmB;;QAC1C,IAAI,MAAC,EAAU,CAAC,QAAQ,0CAAE,OAAO,EAAE;YACjC,EAAE,CAAC,OAAO,GAAG,MAAC,EAAU,CAAC,QAAQ,0CAAE,OAAO,CAAC;SAC5C;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,EAAW,CAAC;QACtC,MAAM,GAAG,GAAG,GAAG,CAAC,WAAW,EAAY,CAAC;QACxC,IAAI,CAAC,CAAC,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCAAI,IAAI,CAAC,EAAE;YACnD,OAAO,GAAG,CAAC,MAAM,CAAC,MAAA,MAAA,EAAE,CAAC,SAAS,kDAAI,mCAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC9C,OAAO,EAAE,EAAE,CAAC,OAAO;aACpB,CAAC,CAAC;SACJ;QACD,IAAI,GAAG,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCAAI,IAAI,EAAE,CAAC,IAAI,GAAG,CAAC;QACxE,IAAI,GAAG,CAAC;QACR,IAAI,MAAA,IAAI,CAAC,OAAO,0CAAE,iBAAiB,EAAE;YACnC,GAAG,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,QAAQ,GAAG,WAAW,GAAG,EAAE,CAAC;YAClC,GAAG,IAAI,QAAQ,CAAC;YAChB,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;SAChC;QACD,MAAM,IAAI,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,sBAAsB,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCAAI;YACnE,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,EAAE,CAAC,IAAI;YACb,OAAO,EAAE,EAAE,CAAC,OAAO;YACnB,KAAK,EAAE,EAAE,CAAC,KAAK;SAChB,CAAC;QACF,8BAAa,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACvD,OAAO,GAAG,CAAC,MAAM,CAAC,MAAA,MAAA,EAAE,CAAC,SAAS,kDAAI,mCAAI,GAAG,CAAC,CAAC,IAAI,CAAC;YAC9C,GAAG,EAAE,GAAG;SACT,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAjCY,yBAAyB;IADrC,IAAA,cAAK,GAAE;;GACK,yBAAyB,CAiCrC;AAjCY,8DAAyB","sourcesContent":["import { Catch, ArgumentsHost, HttpException } from \"@nestjs/common\";\nimport { Request, Response } from \"express\";\nimport { LogDNAhttpExceptionLoggerOptions } from \"./logdna.options\";\nimport { LogDNAService } from \"./logdna.service\";\nimport { randomBytes } from \"crypto\";\n\n@Catch()\nexport class LogDNAhttpExceptionLogger {\n  constructor(private readonly options: LogDNAhttpExceptionLoggerOptions | undefined = undefined) {}\n  catch(ex: HttpException, host: ArgumentsHost) {\n    if ((ex as any).response?.message) {\n      ex.message = (ex as any).response?.message;\n    }\n    const ctx = host.switchToHttp();\n    const req = ctx.getRequest<Request>();\n    const res = ctx.getResponse<Response>();\n    if (!(this.options?.filter?.(ex, req, res) ?? true)) {\n      return res.status(ex.getStatus?.() ?? 500).json({\n        message: ex.message,\n      });\n    }\n    let msg = this.options?.messageFormat?.(ex, req, res) ?? `[${ex.name}]`;\n    let ref;\n    if (this.options?.generateReference) {\n      ref = randomBytes(20).toString(\"base64url\");\n      const appendix = ` Error: ${ref}`;\n      msg += appendix;\n      res.header(\"X-Error-Ref\", ref);\n    }\n    const meta = this.options?.exceptionMetaTransform?.(ex, req, res) ?? {\n      ref: ref,\n      name: ex.name,\n      message: ex.message,\n      stack: ex.stack,\n    };\n    LogDNAService.LogDNAServiceInstance().error(msg, meta);\n    return res.status(ex.getStatus?.() ?? 500).send({\n      ref: ref,\n    });\n  }\n}\n"]}