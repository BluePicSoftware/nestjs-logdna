{"version":3,"file":"logdna.filter.js","sourceRoot":"/","sources":["logdna.filter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAqE;AAGrE,qDAAiD;AACjD,mCAAqC;AAGrC,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IACpC,YACmB,UAAwD,SAAS;QAAjE,YAAO,GAAP,OAAO,CAA0D;IACjF,CAAC;IACJ,KAAK,CAAC,EAAiB,EAAE,IAAmB;;QAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,EAAW,CAAC;QACtC,MAAM,GAAG,GAAG,GAAG,CAAC,WAAW,EAAY,CAAC;QACxC,IAAG,CAAC,CAAC,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCAAI,IAAI,CAAC,EAAE;YAClD,OAAO,GAAG,CAAC,MAAM,CAAC,MAAA,MAAA,EAAE,CAAC,SAAS,kDAAI,mCAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC9C,OAAO,EAAE,EAAE,CAAC,OAAO;aACpB,CAAC,CAAA;SACH;QACD,IAAI,GAAG,GACL,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCAC3C,IAAI,EAAE,CAAC,IAAI,GAAG,CAAC;QACjB,IAAI,GAAG,CAAC;QACR,IAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,iBAAiB,EAAE;YAClC,GAAG,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,QAAQ,GAAG,WAAW,GAAG,EAAE,CAAC;YAClC,GAAG,IAAI,QAAQ,CAAC;YAEhB,IAAG,CAAC,GAAG,CAAC,MAAM;gBAAE,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC;YAChC,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC;SAC3B;QACD,MAAM,IAAI,GACR,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,sBAAsB,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCACpD,EAAE,CAAC;QACL,8BAAa,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACvD,OAAO,GAAG,CAAC,MAAM,CAAC,MAAA,MAAA,EAAE,CAAC,SAAS,kDAAI,mCAAI,GAAG,CAAC,CAAC,IAAI,CAAC;YAC9C,OAAO,EAAE,EAAE,CAAC,OAAO;YACnB,GAAG,EAAE,GAAG;SACT,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AAlCY,yBAAyB;IADrC,IAAA,cAAK,GAAE;;GACK,yBAAyB,CAkCrC;AAlCY,8DAAyB","sourcesContent":["import { Catch, ArgumentsHost, HttpException } from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\nimport { LogDNAhttpExceptionLoggerOptions } from './logdna.options';\r\nimport { LogDNAService } from './logdna.service';\r\nimport { randomBytes } from 'crypto';\r\n\r\n@Catch()\r\nexport class LogDNAhttpExceptionLogger {\r\n  constructor(\r\n    private readonly options: LogDNAhttpExceptionLoggerOptions | undefined = undefined\r\n  ) {}\r\n  catch(ex: HttpException, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const req = ctx.getRequest<Request>();\r\n    const res = ctx.getResponse<Response>();\r\n    if(!(this.options?.filter?.(ex, req, res) ?? true)) {\r\n      return res.status(ex.getStatus?.() ?? 500).json({\r\n        message: ex.message\r\n      })\r\n    }\r\n    let msg = \r\n      this.options?.messageFormat?.(ex, req, res) ?? \r\n      `[${ex.name}]`;\r\n    let ref;\r\n    if(this.options?.generateReference) {\r\n      ref = randomBytes(20).toString('base64url');\r\n      const appendix = ` Error: ${ref}`;\r\n      msg += appendix;\r\n      // fastify shim\r\n      if(!res.locals) res.locals = {};\r\n      res.locals.errorRef = ref;\r\n    }\r\n    const meta = \r\n      this.options?.exceptionMetaTransform?.(ex, req, res) ?? \r\n      ex;\r\n    LogDNAService.LogDNAServiceInstance().error(msg, meta);\r\n    return res.status(ex.getStatus?.() ?? 500).send({\r\n      message: ex.message,\r\n      ref: ref\r\n    })\r\n  }\r\n}"]}