{"version":3,"file":"logdna.filter.js","sourceRoot":"/","sources":["logdna.filter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAqE;AACrE,uCAAmD;AAGnD,+BAAgC;AAChC,qDAAiD;AAGjD,IAAa,yBAAyB,GAAtC,MAAa,yBAA0B,SAAQ,0BAAmB;IAChE,YAA6B,UAAwD,SAAS;QAC5F,KAAK,EAAE,CAAA;QADoB,YAAO,GAAP,OAAO,CAA0D;IAE9F,CAAC;IACD,KAAK,CAAC,EAAS,EAAE,IAAmB;;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,EAAW,CAAC;QACtC,MAAM,GAAG,GAAG,GAAG,CAAC,WAAW,EAAY,CAAC;QACxC,IAAG,CAAC,CAAC,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCAAI,IAAI,CAAC,EAAE;YAClD,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SAC9B;QACD,IAAI,GAAG,GACL,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCAC3C,IAAI,EAAE,CAAC,IAAI,GAAG,CAAC;QACjB,IAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,iBAAiB,EAAE;YAClC,MAAM,GAAG,GAAG,IAAA,SAAI,GAAE,CAAC;YACnB,MAAM,QAAQ,GAAG,WAAW,GAAG,EAAE,CAAC;YAClC,EAAE,CAAC,OAAO,IAAI,QAAQ,CAAC;YACvB,GAAG,IAAI,QAAQ,CAAC;YAChB,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC;SAC3B;QACD,MAAM,IAAI,GACR,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,sBAAsB,mDAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,mCACpD,EAAE,CAAC;QACL,8BAAa,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACvD,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACxB,CAAC;CACF,CAAA;AA3BY,yBAAyB;IADrC,IAAA,cAAK,GAAE;;GACK,yBAAyB,CA2BrC;AA3BY,8DAAyB","sourcesContent":["import { Catch, ArgumentsHost, HttpException } from '@nestjs/common';\r\nimport { BaseExceptionFilter } from '@nestjs/core';\r\nimport { Request, Response } from 'express';\r\nimport { LogDNAhttpExceptionLoggerOptions } from './logdna.options';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { LogDNAService } from './logdna.service';\r\n\r\n@Catch()\r\nexport class LogDNAhttpExceptionLogger extends BaseExceptionFilter {\r\n  constructor(private readonly options: LogDNAhttpExceptionLoggerOptions | undefined = undefined) {\r\n    super()\r\n  }\r\n  catch(ex: Error, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const req = ctx.getRequest<Request>();\r\n    const res = ctx.getResponse<Response>();\r\n    if(!(this.options?.filter?.(ex, req, res) ?? true)) {\r\n      return super.catch(ex, host);\r\n    }\r\n    let msg = \r\n      this.options?.messageFormat?.(ex, req, res) ?? \r\n      `[${ex.name}]`;\r\n    if(this.options?.generateReference) {\r\n      const ref = uuid();\r\n      const appendix = ` Error: ${ref}`;\r\n      ex.message += appendix;\r\n      msg += appendix;\r\n      res.locals.errorRef = ref;\r\n    }\r\n    const meta = \r\n      this.options?.exceptionMetaTransform?.(ex, req, res) ?? \r\n      ex;\r\n    LogDNAService.LogDNAServiceInstance().error(msg, meta);\r\n    super.catch(ex, host);\r\n  }\r\n}"]}