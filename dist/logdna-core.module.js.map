{"version":3,"file":"logdna-core.module.js","sourceRoot":"/","sources":["logdna-core.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,2CAA+E;AAC/E,yDAAyE;AAMzE,yDAA2D;AAC3D,qDAAiD;AAIjD,IAAa,gBAAgB,wBAA7B,MAAa,gBAAgB;IACpB,MAAM,CAAC,OAAO,CAAC,OAA4B;QAChD,MAAM,QAAQ,GAAG,IAAA,wCAAqB,EAAC,OAAO,CAAC,CAAC;QAEhD,OAAO;YACL,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;SACrC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,OAAiC;QAC1D,MAAM,QAAQ,GAAa;YACzB,MAAM,EAAE,CAAC,wCAAqB,CAAC;YAC/B,OAAO,EAAE,+BAAY;YACrB,UAAU,EAAE,CAAC,OAA4B,EAAE,EAAE,CAAC,IAAI,8BAAa,CAAC,OAAO,CAAC;SACzE,CAAC;QAEF,OAAO;YACL,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE;gBACT,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;gBACrC,QAAQ;gBACR,8BAAa;aACd;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,oBAAoB,CACjC,OAAiC;QAEjC,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE;YAC7C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;SACnD;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAsC,CAAC;QAChE,OAAO;YACL,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACE,OAAO,EAAE,QAAQ;gBACjB,QAAQ;aACT;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACvC,OAAiC;QAEjC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO;gBACL,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;gBAC5B,OAAO,EAAE,wCAAqB;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B,CAAC;SACH;QACD,MAAM,MAAM,GAAG;YACb,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAA+B;SACxE,CAAC;QACF,OAAO;YACL,OAAO,EAAE,wCAAqB;YAC9B,UAAU,EAAE,CAAO,cAAoC,EAAE,EAAE,gDACzD,OAAA,MAAM,cAAc,CAAC,yBAAyB,EAAE,CAAA,GAAA;YAClD,MAAM;SACP,CAAC;IACJ,CAAC;CACF,CAAA;AAlEY,gBAAgB;IAF5B,IAAA,eAAM,GAAE;IACR,IAAA,eAAM,EAAC,EAAE,CAAC;GACE,gBAAgB,CAkE5B;AAlEY,4CAAgB","sourcesContent":["import { Module, Global, Provider, Type, DynamicModule } from '@nestjs/common';\nimport { LOGDNA_MODULE_OPTIONS, LOGDNA_TOKEN } from './logdna.constants';\nimport {\n  LogDNAModuleAsyncOptions,\n  LogDNAModuleOptions,\n  LogDNAOptionsFactory,\n} from './logdna.options';\nimport { createLogDNAProviders } from './logdna.providers';\nimport { LogDNAService } from './logdna.service';\n\n@Global()\n@Module({})\nexport class LogDNACoreModule {\n  public static forRoot(options: LogDNAModuleOptions): DynamicModule {\n    const provider = createLogDNAProviders(options);\n\n    return {\n      exports: [provider, LogDNAService],\n      module: LogDNACoreModule,\n      providers: [provider, LogDNAService],\n    };\n  }\n\n  public static forRootAsync(options: LogDNAModuleAsyncOptions): DynamicModule {\n    const provider: Provider = {\n      inject: [LOGDNA_MODULE_OPTIONS],\n      provide: LOGDNA_TOKEN,\n      useFactory: (options: LogDNAModuleOptions) => new LogDNAService(options),\n    };\n\n    return {\n      exports: [provider, LogDNAService],\n      imports: options.imports,\n      module: LogDNACoreModule,\n      providers: [\n        ...this.createAsyncProviders(options),\n        provider,\n        LogDNAService,\n      ],\n    };\n  }\n\n  private static createAsyncProviders(\n    options: LogDNAModuleAsyncOptions\n  ): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    const useClass = options.useClass as Type<LogDNAOptionsFactory>;\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: useClass,\n        useClass,\n      },\n    ];\n  }\n\n  private static createAsyncOptionsProvider(\n    options: LogDNAModuleAsyncOptions\n  ): Provider {\n    if (options.useFactory) {\n      return {\n        inject: options.inject || [],\n        provide: LOGDNA_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n      };\n    }\n    const inject = [\n      (options.useClass || options.useExisting) as Type<LogDNAOptionsFactory>,\n    ];\n    return {\n      provide: LOGDNA_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: LogDNAOptionsFactory) =>\n        await optionsFactory.createLogDNAModuleOptions(),\n      inject,\n    };\n  }\n}\n"]}